##什么是Webpack：##

WebPack可以看做是模块打包机：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。



##优点：##

1，模块化的解决方案
2，编译coffeeScript/TypeScript/Less/Sass
3，有同步加载和异步加载两种
4，支持 common js AMD 规范
5，大型项目的模块化、按需要加载、根据依赖
6，异步 I/O 和多层缓存



##Demo：##

1，全局安装 webpack
--npm install webpack -g

2，安装 webpack , webpack-dev-server 依赖
--npm install webpack webpack-dev-server --save-dev

3，安装 css-loader style-loader json-loader依赖
--npm install css-loader style-loader json-loader --save-dev

3.1 安装 babel 编译 ES6、ES7、JSX 等浏览器无法识别的 js
npm install babel-core babel-loader babel-preset-es2015 babel-preset-react --save-dev

3.2 安装 postcsss-loader autoprefixer 支持不同 css 样式添加厂家前缀
npm install --save-dev postcss-loader autoprefixer

4，建立相关的文件夹及文件
    webpack.config.js               //配置文件，并在该文件里编辑参数，如模块的引用，插件的引用，输出的位置等参数
    app--                           //存放原始数据及相关 js 模块
       -- entry.js                  //入口文件
       module--                     //存放相关js模块
             --module1.js           //模块文件
       style--
            --style.css             //样式文件
    dist--                          //存放打包后的文件，及 index.html 入口
        --index.html


5，在 npm package.json 文件中加入自定义的 scripts 一些命令，以方便在控制台调用，如：

  "scripts": {
    "build": "webpack --progress --colors", //显示进程与颜色
    "builddev":"webpack-dev-server --progress --colors --inline --watch" //--watch 自动编译、 --inline 自动刷新
    "builddetails":"webpack-dev-server --display-error-details"//打印错误的详细信息
    "dev":"webpack-dev-server" //使用开发服务器模式，此模式的配置依赖于 webpack.config.js 中的 devServer 配置
  },

  执行命令为：--npm run task-name




##相关命令：##

** npm install webpack -g                         全局安装
** npm install webpack --save-dev	              依赖安装
** npm install webpack-dev-server -g	          安装 dev server 开发服务器版本，本地服务器，可监听代码变化并自动刷新浏览器
** npm install webpack-dev-server --save-dev      安装依赖

** webpack                                        执行打包命令
** webpack ./entry.js bundle.js                   打包对象
** webpack --progress --colors                    打包（颜色与进度）
** webpack --config  XXXX.js                      使用另一份配置文件xxxx.js打包，适合不同环境的打包度
** webpack -p                                     压缩混淆脚本，这个非常非常重要！
** webpack -d                                     生成map映射文件，告知哪些模块被最终打包到哪里了
** webpack-dev-server --progress --colors --watch --inline
        打包（监听文件变化并随时打包）：会缓冲已打包好的模块，以便当模块没有改变的时候，高速提取未改变模块以加快编译速度
	    要在webpack-config.js 里设置相关端口等。此操作能打包并运行内置服务器。可在 package.json中设置映射命令以方便


####################
##    相关链接：   ##
####################
简书：http://www.jianshu.com/p/42e11515c10f#
GitHub比较全的中文的文档：https://github.com/liunian/webpack-doc/blob/master/SUMMARY.md
比较入门级的中文指南：https://zhaoda.gitbooks.io/webpack/content/index.html

GitHub 官网：http://webpack.github.io
一个比较中肯的介绍：https://github.com/wangning0/Autumn_Ning_Blog/blob/master/blogs/3-12/webpack.md



#############
##  额外的：##
#############
**安装 jquery 并打包引用：
命令：npm install --save jquery babel-polyfill
入口文件： import $ from 'jquery'

**安装 图片压缩并打包引用 ：
命令：npm install image-webpack-loader --save-dev
使用：loaders:[
      {
            test: /\.(png|jpg)$/,
            loaders: [
                'file?hash=sha512&digest=hex&name=[hash].[ext]',
                'image-webpack?bypassOnDebug&optimizationLevel=7&interlaced=false'
            ]
        }
]